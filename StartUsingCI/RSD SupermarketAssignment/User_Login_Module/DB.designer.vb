'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="DB")>  _
Partial Public Class DBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertMember(instance As Member)
    End Sub
  Partial Private Sub UpdateMember(instance As Member)
    End Sub
  Partial Private Sub DeleteMember(instance As Member)
    End Sub
  Partial Private Sub InsertStaff(instance As Staff)
    End Sub
  Partial Private Sub UpdateStaff(instance As Staff)
    End Sub
  Partial Private Sub DeleteStaff(instance As Staff)
    End Sub
  Partial Private Sub InsertUser(instance As User)
    End Sub
  Partial Private Sub UpdateUser(instance As User)
    End Sub
  Partial Private Sub DeleteUser(instance As User)
    End Sub
  Partial Private Sub InsertProduct(instance As Product)
    End Sub
  Partial Private Sub UpdateProduct(instance As Product)
    End Sub
  Partial Private Sub DeleteProduct(instance As Product)
    End Sub
  Partial Private Sub InsertSale(instance As Sale)
    End Sub
  Partial Private Sub UpdateSale(instance As Sale)
    End Sub
  Partial Private Sub DeleteSale(instance As Sale)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.User_Login_Module.My.MySettings.Default.DBConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Members() As System.Data.Linq.Table(Of Member)
		Get
			Return Me.GetTable(Of Member)
		End Get
	End Property
	
	Public ReadOnly Property Staffs() As System.Data.Linq.Table(Of Staff)
		Get
			Return Me.GetTable(Of Staff)
		End Get
	End Property
	
	Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
		Get
			Return Me.GetTable(Of User)
		End Get
	End Property
	
	Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
		Get
			Return Me.GetTable(Of Product)
		End Get
	End Property
	
	Public ReadOnly Property Sales() As System.Data.Linq.Table(Of Sale)
		Get
			Return Me.GetTable(Of Sale)
		End Get
	End Property
	
	Public ReadOnly Property MonthlySalesAugs() As System.Data.Linq.Table(Of MonthlySalesAug)
		Get
			Return Me.GetTable(Of MonthlySalesAug)
		End Get
	End Property
	
	Public ReadOnly Property CardCompnyUsageAugs() As System.Data.Linq.Table(Of CardCompnyUsageAug)
		Get
			Return Me.GetTable(Of CardCompnyUsageAug)
		End Get
	End Property
	
	Public ReadOnly Property LeastSaleAugs() As System.Data.Linq.Table(Of LeastSaleAug)
		Get
			Return Me.GetTable(Of LeastSaleAug)
		End Get
	End Property
	
	Public ReadOnly Property CardCompnyUsageJulies() As System.Data.Linq.Table(Of CardCompnyUsageJuly)
		Get
			Return Me.GetTable(Of CardCompnyUsageJuly)
		End Get
	End Property
	
	Public ReadOnly Property CardCompnyUsageJunes() As System.Data.Linq.Table(Of CardCompnyUsageJune)
		Get
			Return Me.GetTable(Of CardCompnyUsageJune)
		End Get
	End Property
	
	Public ReadOnly Property LeastSaleJulies() As System.Data.Linq.Table(Of LeastSaleJuly)
		Get
			Return Me.GetTable(Of LeastSaleJuly)
		End Get
	End Property
	
	Public ReadOnly Property LeastSaleJunes() As System.Data.Linq.Table(Of LeastSaleJune)
		Get
			Return Me.GetTable(Of LeastSaleJune)
		End Get
	End Property
	
	Public ReadOnly Property MonthlySalesJulies() As System.Data.Linq.Table(Of MonthlySalesJuly)
		Get
			Return Me.GetTable(Of MonthlySalesJuly)
		End Get
	End Property
	
	Public ReadOnly Property MonthlySalesJunes() As System.Data.Linq.Table(Of MonthlySalesJune)
		Get
			Return Me.GetTable(Of MonthlySalesJune)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Member")>  _
Partial Public Class Member
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _member_id As String
	
	Private _member_name As String
	
	Private _member_gender As String
	
	Private _member_phone As String
	
	Private _member_point As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onmember_idChanging(value As String)
    End Sub
    Partial Private Sub Onmember_idChanged()
    End Sub
    Partial Private Sub Onmember_nameChanging(value As String)
    End Sub
    Partial Private Sub Onmember_nameChanged()
    End Sub
    Partial Private Sub Onmember_genderChanging(value As String)
    End Sub
    Partial Private Sub Onmember_genderChanged()
    End Sub
    Partial Private Sub Onmember_phoneChanging(value As String)
    End Sub
    Partial Private Sub Onmember_phoneChanged()
    End Sub
    Partial Private Sub Onmember_pointChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onmember_pointChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_id", DbType:="VarChar(8) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property member_id() As String
		Get
			Return Me._member_id
		End Get
		Set
			If (String.Equals(Me._member_id, value) = false) Then
				Me.Onmember_idChanging(value)
				Me.SendPropertyChanging
				Me._member_id = value
				Me.SendPropertyChanged("member_id")
				Me.Onmember_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_name", DbType:="VarChar(30)")>  _
	Public Property member_name() As String
		Get
			Return Me._member_name
		End Get
		Set
			If (String.Equals(Me._member_name, value) = false) Then
				Me.Onmember_nameChanging(value)
				Me.SendPropertyChanging
				Me._member_name = value
				Me.SendPropertyChanged("member_name")
				Me.Onmember_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_gender", DbType:="VarChar(6)")>  _
	Public Property member_gender() As String
		Get
			Return Me._member_gender
		End Get
		Set
			If (String.Equals(Me._member_gender, value) = false) Then
				Me.Onmember_genderChanging(value)
				Me.SendPropertyChanging
				Me._member_gender = value
				Me.SendPropertyChanged("member_gender")
				Me.Onmember_genderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_phone", DbType:="VarChar(10)")>  _
	Public Property member_phone() As String
		Get
			Return Me._member_phone
		End Get
		Set
			If (String.Equals(Me._member_phone, value) = false) Then
				Me.Onmember_phoneChanging(value)
				Me.SendPropertyChanging
				Me._member_phone = value
				Me.SendPropertyChanged("member_phone")
				Me.Onmember_phoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_point", DbType:="Int")>  _
	Public Property member_point() As System.Nullable(Of Integer)
		Get
			Return Me._member_point
		End Get
		Set
			If (Me._member_point.Equals(value) = false) Then
				Me.Onmember_pointChanging(value)
				Me.SendPropertyChanging
				Me._member_point = value
				Me.SendPropertyChanged("member_point")
				Me.Onmember_pointChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Staff")>  _
Partial Public Class Staff
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _staff_id As String
	
	Private _staff_name As String
	
	Private _staff_position As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onstaff_idChanging(value As String)
    End Sub
    Partial Private Sub Onstaff_idChanged()
    End Sub
    Partial Private Sub Onstaff_nameChanging(value As String)
    End Sub
    Partial Private Sub Onstaff_nameChanged()
    End Sub
    Partial Private Sub Onstaff_positionChanging(value As String)
    End Sub
    Partial Private Sub Onstaff_positionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staff_id", DbType:="VarChar(8) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property staff_id() As String
		Get
			Return Me._staff_id
		End Get
		Set
			If (String.Equals(Me._staff_id, value) = false) Then
				Me.Onstaff_idChanging(value)
				Me.SendPropertyChanging
				Me._staff_id = value
				Me.SendPropertyChanged("staff_id")
				Me.Onstaff_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staff_name", DbType:="VarChar(30)")>  _
	Public Property staff_name() As String
		Get
			Return Me._staff_name
		End Get
		Set
			If (String.Equals(Me._staff_name, value) = false) Then
				Me.Onstaff_nameChanging(value)
				Me.SendPropertyChanging
				Me._staff_name = value
				Me.SendPropertyChanged("staff_name")
				Me.Onstaff_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staff_position", DbType:="VarChar(50)")>  _
	Public Property staff_position() As String
		Get
			Return Me._staff_position
		End Get
		Set
			If (String.Equals(Me._staff_position, value) = false) Then
				Me.Onstaff_positionChanging(value)
				Me.SendPropertyChanging
				Me._staff_position = value
				Me.SendPropertyChanged("staff_position")
				Me.Onstaff_positionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[User]")>  _
Partial Public Class User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _user_id As String
	
	Private _user_name As String
	
	Private _user_cardtype As String
	
	Private _user_CCV As String
	
	Private _user_ccompany As String
	
	Private _user_password As String
	
	Private _user_email As String
	
	Private _member_id As String
	
	Private _staff_id As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onuser_idChanging(value As String)
    End Sub
    Partial Private Sub Onuser_idChanged()
    End Sub
    Partial Private Sub Onuser_nameChanging(value As String)
    End Sub
    Partial Private Sub Onuser_nameChanged()
    End Sub
    Partial Private Sub Onuser_cardtypeChanging(value As String)
    End Sub
    Partial Private Sub Onuser_cardtypeChanged()
    End Sub
    Partial Private Sub Onuser_CCVChanging(value As String)
    End Sub
    Partial Private Sub Onuser_CCVChanged()
    End Sub
    Partial Private Sub Onuser_ccompanyChanging(value As String)
    End Sub
    Partial Private Sub Onuser_ccompanyChanged()
    End Sub
    Partial Private Sub Onuser_passwordChanging(value As String)
    End Sub
    Partial Private Sub Onuser_passwordChanged()
    End Sub
    Partial Private Sub Onuser_emailChanging(value As String)
    End Sub
    Partial Private Sub Onuser_emailChanged()
    End Sub
    Partial Private Sub Onmember_idChanging(value As String)
    End Sub
    Partial Private Sub Onmember_idChanged()
    End Sub
    Partial Private Sub Onstaff_idChanging(value As String)
    End Sub
    Partial Private Sub Onstaff_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", DbType:="VarChar(8) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property user_id() As String
		Get
			Return Me._user_id
		End Get
		Set
			If (String.Equals(Me._user_id, value) = false) Then
				Me.Onuser_idChanging(value)
				Me.SendPropertyChanging
				Me._user_id = value
				Me.SendPropertyChanged("user_id")
				Me.Onuser_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_name", DbType:="VarChar(30)")>  _
	Public Property user_name() As String
		Get
			Return Me._user_name
		End Get
		Set
			If (String.Equals(Me._user_name, value) = false) Then
				Me.Onuser_nameChanging(value)
				Me.SendPropertyChanging
				Me._user_name = value
				Me.SendPropertyChanged("user_name")
				Me.Onuser_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_cardtype", DbType:="VarChar(6)")>  _
	Public Property user_cardtype() As String
		Get
			Return Me._user_cardtype
		End Get
		Set
			If (String.Equals(Me._user_cardtype, value) = false) Then
				Me.Onuser_cardtypeChanging(value)
				Me.SendPropertyChanging
				Me._user_cardtype = value
				Me.SendPropertyChanged("user_cardtype")
				Me.Onuser_cardtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_CCV", DbType:="VarChar(3)")>  _
	Public Property user_CCV() As String
		Get
			Return Me._user_CCV
		End Get
		Set
			If (String.Equals(Me._user_CCV, value) = false) Then
				Me.Onuser_CCVChanging(value)
				Me.SendPropertyChanging
				Me._user_CCV = value
				Me.SendPropertyChanged("user_CCV")
				Me.Onuser_CCVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_ccompany", DbType:="VarChar(15)")>  _
	Public Property user_ccompany() As String
		Get
			Return Me._user_ccompany
		End Get
		Set
			If (String.Equals(Me._user_ccompany, value) = false) Then
				Me.Onuser_ccompanyChanging(value)
				Me.SendPropertyChanging
				Me._user_ccompany = value
				Me.SendPropertyChanged("user_ccompany")
				Me.Onuser_ccompanyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_password", DbType:="VarChar(8)")>  _
	Public Property user_password() As String
		Get
			Return Me._user_password
		End Get
		Set
			If (String.Equals(Me._user_password, value) = false) Then
				Me.Onuser_passwordChanging(value)
				Me.SendPropertyChanging
				Me._user_password = value
				Me.SendPropertyChanged("user_password")
				Me.Onuser_passwordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_email", DbType:="VarChar(30)")>  _
	Public Property user_email() As String
		Get
			Return Me._user_email
		End Get
		Set
			If (String.Equals(Me._user_email, value) = false) Then
				Me.Onuser_emailChanging(value)
				Me.SendPropertyChanging
				Me._user_email = value
				Me.SendPropertyChanged("user_email")
				Me.Onuser_emailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_member_id", DbType:="VarChar(8)")>  _
	Public Property member_id() As String
		Get
			Return Me._member_id
		End Get
		Set
			If (String.Equals(Me._member_id, value) = false) Then
				Me.Onmember_idChanging(value)
				Me.SendPropertyChanging
				Me._member_id = value
				Me.SendPropertyChanged("member_id")
				Me.Onmember_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staff_id", DbType:="VarChar(8)")>  _
	Public Property staff_id() As String
		Get
			Return Me._staff_id
		End Get
		Set
			If (String.Equals(Me._staff_id, value) = false) Then
				Me.Onstaff_idChanging(value)
				Me.SendPropertyChanging
				Me._staff_id = value
				Me.SendPropertyChanged("staff_id")
				Me.Onstaff_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Product")>  _
Partial Public Class Product
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _product_id As String
	
	Private _product_name As String
	
	Private _product_quantity As System.Nullable(Of Integer)
	
	Private _product_catagory As String
	
	Private _product_price As System.Nullable(Of Double)
	
	Private _product_type As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onproduct_idChanging(value As String)
    End Sub
    Partial Private Sub Onproduct_idChanged()
    End Sub
    Partial Private Sub Onproduct_nameChanging(value As String)
    End Sub
    Partial Private Sub Onproduct_nameChanged()
    End Sub
    Partial Private Sub Onproduct_quantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onproduct_quantityChanged()
    End Sub
    Partial Private Sub Onproduct_catagoryChanging(value As String)
    End Sub
    Partial Private Sub Onproduct_catagoryChanged()
    End Sub
    Partial Private Sub Onproduct_priceChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Onproduct_priceChanged()
    End Sub
    Partial Private Sub Onproduct_typeChanging(value As String)
    End Sub
    Partial Private Sub Onproduct_typeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_id", DbType:="VarChar(8) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property product_id() As String
		Get
			Return Me._product_id
		End Get
		Set
			If (String.Equals(Me._product_id, value) = false) Then
				Me.Onproduct_idChanging(value)
				Me.SendPropertyChanging
				Me._product_id = value
				Me.SendPropertyChanged("product_id")
				Me.Onproduct_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_name", DbType:="VarChar(30)")>  _
	Public Property product_name() As String
		Get
			Return Me._product_name
		End Get
		Set
			If (String.Equals(Me._product_name, value) = false) Then
				Me.Onproduct_nameChanging(value)
				Me.SendPropertyChanging
				Me._product_name = value
				Me.SendPropertyChanged("product_name")
				Me.Onproduct_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_quantity", DbType:="Int")>  _
	Public Property product_quantity() As System.Nullable(Of Integer)
		Get
			Return Me._product_quantity
		End Get
		Set
			If (Me._product_quantity.Equals(value) = false) Then
				Me.Onproduct_quantityChanging(value)
				Me.SendPropertyChanging
				Me._product_quantity = value
				Me.SendPropertyChanged("product_quantity")
				Me.Onproduct_quantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_catagory", DbType:="VarChar(20)")>  _
	Public Property product_catagory() As String
		Get
			Return Me._product_catagory
		End Get
		Set
			If (String.Equals(Me._product_catagory, value) = false) Then
				Me.Onproduct_catagoryChanging(value)
				Me.SendPropertyChanging
				Me._product_catagory = value
				Me.SendPropertyChanged("product_catagory")
				Me.Onproduct_catagoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_price", DbType:="Float")>  _
	Public Property product_price() As System.Nullable(Of Double)
		Get
			Return Me._product_price
		End Get
		Set
			If (Me._product_price.Equals(value) = false) Then
				Me.Onproduct_priceChanging(value)
				Me.SendPropertyChanging
				Me._product_price = value
				Me.SendPropertyChanged("product_price")
				Me.Onproduct_priceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_type", DbType:="VarChar(20)")>  _
	Public Property product_type() As String
		Get
			Return Me._product_type
		End Get
		Set
			If (String.Equals(Me._product_type, value) = false) Then
				Me.Onproduct_typeChanging(value)
				Me.SendPropertyChanging
				Me._product_type = value
				Me.SendPropertyChanged("product_type")
				Me.Onproduct_typeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sales")>  _
Partial Public Class Sale
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _sales_id As String
	
	Private _product_id As String
	
	Private _user_id As String
	
	Private _quantity As System.Nullable(Of Integer)
	
	Private _purchase_date As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onsales_idChanging(value As String)
    End Sub
    Partial Private Sub Onsales_idChanged()
    End Sub
    Partial Private Sub Onproduct_idChanging(value As String)
    End Sub
    Partial Private Sub Onproduct_idChanged()
    End Sub
    Partial Private Sub Onuser_idChanging(value As String)
    End Sub
    Partial Private Sub Onuser_idChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    Partial Private Sub Onpurchase_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onpurchase_dateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sales_id", DbType:="VarChar(8) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property sales_id() As String
		Get
			Return Me._sales_id
		End Get
		Set
			If (String.Equals(Me._sales_id, value) = false) Then
				Me.Onsales_idChanging(value)
				Me.SendPropertyChanging
				Me._sales_id = value
				Me.SendPropertyChanged("sales_id")
				Me.Onsales_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_id", DbType:="VarChar(8)")>  _
	Public Property product_id() As String
		Get
			Return Me._product_id
		End Get
		Set
			If (String.Equals(Me._product_id, value) = false) Then
				Me.Onproduct_idChanging(value)
				Me.SendPropertyChanging
				Me._product_id = value
				Me.SendPropertyChanged("product_id")
				Me.Onproduct_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", DbType:="VarChar(8)")>  _
	Public Property user_id() As String
		Get
			Return Me._user_id
		End Get
		Set
			If (String.Equals(Me._user_id, value) = false) Then
				Me.Onuser_idChanging(value)
				Me.SendPropertyChanging
				Me._user_id = value
				Me.SendPropertyChanged("user_id")
				Me.Onuser_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Int")>  _
	Public Property quantity() As System.Nullable(Of Integer)
		Get
			Return Me._quantity
		End Get
		Set
			If (Me._quantity.Equals(value) = false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_purchase_date", DbType:="DateTime")>  _
	Public Property purchase_date() As System.Nullable(Of Date)
		Get
			Return Me._purchase_date
		End Get
		Set
			If (Me._purchase_date.Equals(value) = false) Then
				Me.Onpurchase_dateChanging(value)
				Me.SendPropertyChanging
				Me._purchase_date = value
				Me.SendPropertyChanged("purchase_date")
				Me.Onpurchase_dateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MonthlySalesAug")>  _
Partial Public Class MonthlySalesAug
	
	Private _product_name As String
	
	Private _product_price As System.Nullable(Of Double)
	
	Private _Total_Quantity As System.Nullable(Of Integer)
	
	Private _Total_Sales As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_name", DbType:="VarChar(30)")>  _
	Public Property product_name() As String
		Get
			Return Me._product_name
		End Get
		Set
			If (String.Equals(Me._product_name, value) = false) Then
				Me._product_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_price", DbType:="Float")>  _
	Public Property product_price() As System.Nullable(Of Double)
		Get
			Return Me._product_price
		End Get
		Set
			If (Me._product_price.Equals(value) = false) Then
				Me._product_price = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Total Quantity]", Storage:="_Total_Quantity", DbType:="Int")>  _
	Public Property Total_Quantity() As System.Nullable(Of Integer)
		Get
			Return Me._Total_Quantity
		End Get
		Set
			If (Me._Total_Quantity.Equals(value) = false) Then
				Me._Total_Quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Total Sales]", Storage:="_Total_Sales", DbType:="Float")>  _
	Public Property Total_Sales() As System.Nullable(Of Double)
		Get
			Return Me._Total_Sales
		End Get
		Set
			If (Me._Total_Sales.Equals(value) = false) Then
				Me._Total_Sales = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CardCompnyUsageAug")>  _
Partial Public Class CardCompnyUsageAug
	
	Private _user_cardtype As String
	
	Private _user_ccompany As String
	
	Private _NUMBER_OF_USERS As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_cardtype", DbType:="VarChar(6)")>  _
	Public Property user_cardtype() As String
		Get
			Return Me._user_cardtype
		End Get
		Set
			If (String.Equals(Me._user_cardtype, value) = false) Then
				Me._user_cardtype = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_ccompany", DbType:="VarChar(15)")>  _
	Public Property user_ccompany() As String
		Get
			Return Me._user_ccompany
		End Get
		Set
			If (String.Equals(Me._user_ccompany, value) = false) Then
				Me._user_ccompany = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[NUMBER OF USERS]", Storage:="_NUMBER_OF_USERS", DbType:="Int")>  _
	Public Property NUMBER_OF_USERS() As System.Nullable(Of Integer)
		Get
			Return Me._NUMBER_OF_USERS
		End Get
		Set
			If (Me._NUMBER_OF_USERS.Equals(value) = false) Then
				Me._NUMBER_OF_USERS = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LeastSaleAug")>  _
Partial Public Class LeastSaleAug
	
	Private _product_name As String
	
	Private _product_catagory As String
	
	Private _Total_Quantity As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_name", DbType:="VarChar(30)")>  _
	Public Property product_name() As String
		Get
			Return Me._product_name
		End Get
		Set
			If (String.Equals(Me._product_name, value) = false) Then
				Me._product_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_catagory", DbType:="VarChar(20)")>  _
	Public Property product_catagory() As String
		Get
			Return Me._product_catagory
		End Get
		Set
			If (String.Equals(Me._product_catagory, value) = false) Then
				Me._product_catagory = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Total Quantity]", Storage:="_Total_Quantity", DbType:="Int")>  _
	Public Property Total_Quantity() As System.Nullable(Of Integer)
		Get
			Return Me._Total_Quantity
		End Get
		Set
			If (Me._Total_Quantity.Equals(value) = false) Then
				Me._Total_Quantity = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CardCompnyUsageJuly")>  _
Partial Public Class CardCompnyUsageJuly
	
	Private _user_cardtype As String
	
	Private _user_ccompany As String
	
	Private _NUMBER_OF_USERS As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_cardtype", DbType:="VarChar(6)")>  _
	Public Property user_cardtype() As String
		Get
			Return Me._user_cardtype
		End Get
		Set
			If (String.Equals(Me._user_cardtype, value) = false) Then
				Me._user_cardtype = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_ccompany", DbType:="VarChar(15)")>  _
	Public Property user_ccompany() As String
		Get
			Return Me._user_ccompany
		End Get
		Set
			If (String.Equals(Me._user_ccompany, value) = false) Then
				Me._user_ccompany = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[NUMBER OF USERS]", Storage:="_NUMBER_OF_USERS", DbType:="Int")>  _
	Public Property NUMBER_OF_USERS() As System.Nullable(Of Integer)
		Get
			Return Me._NUMBER_OF_USERS
		End Get
		Set
			If (Me._NUMBER_OF_USERS.Equals(value) = false) Then
				Me._NUMBER_OF_USERS = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CardCompnyUsageJune")>  _
Partial Public Class CardCompnyUsageJune
	
	Private _user_cardtype As String
	
	Private _user_ccompany As String
	
	Private _NUMBER_OF_USERS As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_cardtype", DbType:="VarChar(6)")>  _
	Public Property user_cardtype() As String
		Get
			Return Me._user_cardtype
		End Get
		Set
			If (String.Equals(Me._user_cardtype, value) = false) Then
				Me._user_cardtype = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_ccompany", DbType:="VarChar(15)")>  _
	Public Property user_ccompany() As String
		Get
			Return Me._user_ccompany
		End Get
		Set
			If (String.Equals(Me._user_ccompany, value) = false) Then
				Me._user_ccompany = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[NUMBER OF USERS]", Storage:="_NUMBER_OF_USERS", DbType:="Int")>  _
	Public Property NUMBER_OF_USERS() As System.Nullable(Of Integer)
		Get
			Return Me._NUMBER_OF_USERS
		End Get
		Set
			If (Me._NUMBER_OF_USERS.Equals(value) = false) Then
				Me._NUMBER_OF_USERS = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LeastSaleJuly")>  _
Partial Public Class LeastSaleJuly
	
	Private _product_name As String
	
	Private _product_catagory As String
	
	Private _Total_Quantity As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_name", DbType:="VarChar(30)")>  _
	Public Property product_name() As String
		Get
			Return Me._product_name
		End Get
		Set
			If (String.Equals(Me._product_name, value) = false) Then
				Me._product_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_catagory", DbType:="VarChar(20)")>  _
	Public Property product_catagory() As String
		Get
			Return Me._product_catagory
		End Get
		Set
			If (String.Equals(Me._product_catagory, value) = false) Then
				Me._product_catagory = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Total Quantity]", Storage:="_Total_Quantity", DbType:="Int")>  _
	Public Property Total_Quantity() As System.Nullable(Of Integer)
		Get
			Return Me._Total_Quantity
		End Get
		Set
			If (Me._Total_Quantity.Equals(value) = false) Then
				Me._Total_Quantity = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LeastSaleJune")>  _
Partial Public Class LeastSaleJune
	
	Private _product_name As String
	
	Private _product_catagory As String
	
	Private _Total_Quantity As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_name", DbType:="VarChar(30)")>  _
	Public Property product_name() As String
		Get
			Return Me._product_name
		End Get
		Set
			If (String.Equals(Me._product_name, value) = false) Then
				Me._product_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_catagory", DbType:="VarChar(20)")>  _
	Public Property product_catagory() As String
		Get
			Return Me._product_catagory
		End Get
		Set
			If (String.Equals(Me._product_catagory, value) = false) Then
				Me._product_catagory = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Total Quantity]", Storage:="_Total_Quantity", DbType:="Int")>  _
	Public Property Total_Quantity() As System.Nullable(Of Integer)
		Get
			Return Me._Total_Quantity
		End Get
		Set
			If (Me._Total_Quantity.Equals(value) = false) Then
				Me._Total_Quantity = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MonthlySalesJuly")>  _
Partial Public Class MonthlySalesJuly
	
	Private _product_name As String
	
	Private _product_price As System.Nullable(Of Double)
	
	Private _Total_Quantity As System.Nullable(Of Integer)
	
	Private _Total_Sales As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_name", DbType:="VarChar(30)")>  _
	Public Property product_name() As String
		Get
			Return Me._product_name
		End Get
		Set
			If (String.Equals(Me._product_name, value) = false) Then
				Me._product_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_price", DbType:="Float")>  _
	Public Property product_price() As System.Nullable(Of Double)
		Get
			Return Me._product_price
		End Get
		Set
			If (Me._product_price.Equals(value) = false) Then
				Me._product_price = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Total Quantity]", Storage:="_Total_Quantity", DbType:="Int")>  _
	Public Property Total_Quantity() As System.Nullable(Of Integer)
		Get
			Return Me._Total_Quantity
		End Get
		Set
			If (Me._Total_Quantity.Equals(value) = false) Then
				Me._Total_Quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Total Sales]", Storage:="_Total_Sales", DbType:="Float")>  _
	Public Property Total_Sales() As System.Nullable(Of Double)
		Get
			Return Me._Total_Sales
		End Get
		Set
			If (Me._Total_Sales.Equals(value) = false) Then
				Me._Total_Sales = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MonthlySalesJune")>  _
Partial Public Class MonthlySalesJune
	
	Private _product_name As String
	
	Private _product_price As System.Nullable(Of Double)
	
	Private _Total_Quantity As System.Nullable(Of Integer)
	
	Private _Total_Sales As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_name", DbType:="VarChar(30)")>  _
	Public Property product_name() As String
		Get
			Return Me._product_name
		End Get
		Set
			If (String.Equals(Me._product_name, value) = false) Then
				Me._product_name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_product_price", DbType:="Float")>  _
	Public Property product_price() As System.Nullable(Of Double)
		Get
			Return Me._product_price
		End Get
		Set
			If (Me._product_price.Equals(value) = false) Then
				Me._product_price = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Total Quantity]", Storage:="_Total_Quantity", DbType:="Int")>  _
	Public Property Total_Quantity() As System.Nullable(Of Integer)
		Get
			Return Me._Total_Quantity
		End Get
		Set
			If (Me._Total_Quantity.Equals(value) = false) Then
				Me._Total_Quantity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Total Sales]", Storage:="_Total_Sales", DbType:="Float")>  _
	Public Property Total_Sales() As System.Nullable(Of Double)
		Get
			Return Me._Total_Sales
		End Get
		Set
			If (Me._Total_Sales.Equals(value) = false) Then
				Me._Total_Sales = value
			End If
		End Set
	End Property
End Class
